/**
 * This code was generated by v0 by Vercel.
 * @see https://v0.dev/t/gtqt5ovvMd7
 * Documentation: https://v0.dev/docs#integrating-generated-code-into-your-nextjs-app
 */

/** Add fonts into your Next.js project:

import { Inter } from 'next/font/google'

inter({
  subsets: ['latin'],
  display: 'swap',
})

To read more about using these font, please visit the Next.js documentation:
- App Directory: https://nextjs.org/docs/app/building-your-application/optimizing/fonts
- Pages Directory: https://nextjs.org/docs/pages/building-your-application/optimizing/fonts
**/
'use client';

import { FC, useState } from 'react';
import { Input } from '@/components/ui/input';
import { Button } from '@/components/ui/button';
import { Textarea } from '@/components/ui/textarea';
import {
  Table,
  TableHeader,
  TableRow,
  TableHead,
  TableBody,
  TableCell,
} from '@/components/ui/table';
import { Nullable } from '@/app/owners/[id]/pets/page';

interface AppointmentProps {
  pet: {
    id: Nullable<string>;
    name?: string;
  };
  owner: {
    id?: Nullable<string>;
  };
  appointments: {
    id: Nullable<string>;
    name: string;
    ownerName: string;
    appointmentDateTime: Nullable<string>;
    reason: string;
  }[];
}

export const Appointments: FC<AppointmentProps> = ({
  appointments,
  pet,
  owner,
}) => {
  const [newAppointment, setNewAppointment] = useState({
    petName: 'Buddy',
    ownerName: 'John Doe',
    appointmentDateTime: '2023-06-15 10:00 AM',
    reason: 'Routine checkup',
  });
  const handleInputChange = (e: any) => {
    setNewAppointment({
      ...newAppointment,
      [e.target.name]: e.target.value,
    });
  };
  const handleSubmit = (e: any) => {
    e.preventDefault();

    setNewAppointment({
      petName: 'Buddy',
      ownerName: 'John Doe',
      appointmentDateTime: '2023-06-15 10:00 AM',
      reason: 'Routine checkup',
    });
  };

  return (
    <div className="container mx-auto px-4 py-8">
      <h1 className="text-3xl font-bold mb-6">Vet Appointments</h1>
      <div className="grid grid-cols-1 md:grid-cols-2 gap-8">
        <div>
          <h2 className="text-2xl font-bold mb-4">New Appointment</h2>
          <form onSubmit={handleSubmit} className="space-y-4">
            <div>
              <label htmlFor="petName" className="block font-medium mb-1">
                Pet Name
              </label>
              <Input
                id="petName"
                name="petName"
                value={newAppointment.petName}
                onChange={handleInputChange}
                required
              />
            </div>
            <div>
              <label htmlFor="ownerName" className="block font-medium mb-1">
                Owner Name
              </label>
              <Input
                id="ownerName"
                name="ownerName"
                value={newAppointment.ownerName}
                onChange={handleInputChange}
                required
              />
            </div>
            <div>
              <label htmlFor="reason" className="block font-medium mb-1">
                Reason for Visit
              </label>
              <Textarea
                id="reason"
                name="reason"
                value={newAppointment.reason}
                onChange={handleInputChange}
                required
              />
            </div>
            <Button type="submit" className="w-full">
              Create Appointment
            </Button>
          </form>
        </div>
        <div>
          <h2 className="text-2xl font-bold mb-4">Past Appointments</h2>
          <Table>
            <TableHeader>
              <TableRow>
                <TableHead>Pet Name</TableHead>
                <TableHead>Owner Name</TableHead>
                <TableHead>Appointment</TableHead>
                <TableHead>Content</TableHead>
              </TableRow>
            </TableHeader>
            <TableBody>
              {appointments.map((appointment) => (
                <TableRow key={appointment.id}>
                  <TableCell>{appointment.name}</TableCell>
                  <TableCell>{appointment.ownerName}</TableCell>
                  <TableCell>
                    {new Date(
                      appointment.appointmentDateTime as string
                    ).toLocaleString()}
                  </TableCell>
                  <TableCell>{appointment.reason}</TableCell>
                </TableRow>
              ))}
            </TableBody>
          </Table>
        </div>
      </div>
    </div>
  );
};

function CalendarDaysIcon(props: any) {
  return (
    <svg
      {...props}
      xmlns="http://www.w3.org/2000/svg"
      width="24"
      height="24"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      strokeWidth="2"
      strokeLinecap="round"
      strokeLinejoin="round"
    >
      <path d="M8 2v4" />
      <path d="M16 2v4" />
      <rect width="18" height="18" x="3" y="4" rx="2" />
      <path d="M3 10h18" />
      <path d="M8 14h.01" />
      <path d="M12 14h.01" />
      <path d="M16 14h.01" />
      <path d="M8 18h.01" />
      <path d="M12 18h.01" />
      <path d="M16 18h.01" />
    </svg>
  );
}
